@page "/lesson-card-builder"
@rendermode InteractiveServer
@using System.Linq
@using bgbahasajerman_RazorClassLibrary.Components

<h1>Lesson Card Builder (Skeleton)</h1>

<!-- Section-level controls -->
<button type="button" @onclick="AddSection">+ Add Section</button>
<button type="button" @onclick="RemoveSection" disabled="@(cellCounts.Count == 0)">− Remove Section</button>

<p>Total sections: @cellCounts.Count</p>
<p style="color:#666;font-size:.9rem">[page debug] cellCounts = @string.Join(",", cellCounts)</p>

<hr />

<!-- Per-section controls (each section has its own Add/Remove Cell) -->
@for (int i = 0; i < cellCounts.Count; i++)
{
    var index = i;
    <!-- capture a stable copy to avoid loop-variable capture -->
    <div style="margin:.4rem 0;">
        <strong>Section @(index + 1)</strong> —
        Cells: <span style="font-family:monospace">@cellCounts[index]</span>
        <button type="button" @onclick="() => AddCellTo(index)">+ Add cell</button>
        <button type="button" @onclick="() => RemoveCellFrom(index)" disabled="@(cellCounts[index] == 0)">− Remove cell</button>
    </div>
}

<hr />

<!-- Pass counts; force remount with @key -->
<LessonCardSkeleton CellCounts="@cellCounts.ToList()" @key="rev" />

@code {
    private List<int> cellCounts = new();
    private int rev;

    // ===== Section methods =====
    private void AddSection()
    {
        cellCounts.Add(0);
        Refresh();
    }

    private void RemoveSection()
    {
        if (cellCounts.Count == 0) return;
        cellCounts.RemoveAt(cellCounts.Count - 1);
        Refresh();
    }

    // ===== Cell methods =====
    private void AddCellTo(int sectionIndex)
    {
        Console.WriteLine($"AddCellTo called with index={sectionIndex}, count={cellCounts.Count}");
        if (!IsValidSection(sectionIndex)) { Console.WriteLine(" -> invalid index"); return; }

        cellCounts[sectionIndex] += 1;
        Refresh();
    }

    private void RemoveCellFrom(int sectionIndex)
    {
        if (!IsValidSection(sectionIndex)) return;
        if (cellCounts[sectionIndex] > 0) cellCounts[sectionIndex] -= 1;
        Refresh();
    }

    // ===== Helpers =====
    private bool IsValidSection(int index) => index >= 0 && index < cellCounts.Count;

    private void Refresh()
    {
        // ensure child sees a change & remounts
        cellCounts = new List<int>(cellCounts);
        rev++;
        StateHasChanged();
    }
}
